:: InitPerkTraits [nobr]

/* ####################### */
/* SPECIAL PERKS */
/* ####################### */

<<run new setup.Perk(
    'perk_doppelganger',
    'special perk: doppelganger',
    "Shapeshifts into the <<rep setup.title.quest_doppelganged>> unit every " + setup.PERK_QUEST_DOPPELGANGER_WEEKS + " weeks when at home.",
    0,
    {
        social: -0.5,
        intrigue: -0.5,
    },
    ['perk', 'perkspecial',],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.And([
                    setup.qres.Function(() => {
                        return State.variables.calendar.getWeek() % setup.PERK_QUEST_DOPPELGANGER_WEEKS == 0;
                    }),
                    setup.qres.Actor('unit', setup.qres.Home()),
                ]),
                setup.qc.QuestDoppelganger(),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_doppelganged',
    'special perk: doppelganged',
    "Heal " + setup.PERK_QUEST_DOPPELGANGER_INJURY_HEAL + " weeks of injuries every " + setup.PERK_QUEST_DOPPELGANGER_INJURY_WEEKS + " weeks.",
    0,
    {
        sex: -0.5,
        social: -0.5,
    },
    ['perk', 'perkspecial',],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % setup.PERK_QUEST_DOPPELGANGER_INJURY_WEEKS == 0;
                }),
                setup.qc.Heal('unit', setup.PERK_QUEST_DOPPELGANGER_INJURY_HEAL),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>


<<run new setup.Perk(
    'perk_harbinger_of_chaos',
    'special perk: harbinger of chaos',
    "Grant both a blessing and a curse every 13 weeks.",
    0,
    {
    },
    ['perk', 'perkspecial',],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % 13 == 0;
                }),
                setup.qc.DoAll([
                    setup.qc.Blessing('unit', 1, null, false),
                    setup.qc.Blessing('unit', 1, null, true),
                ]),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<set _harbinger_of_crow_skill_boost = setup.PERK_QUEST_HARBINGER_OF_CROW_SKILL_BONUS>>

<<run new setup.Perk(
    'perk_harbinger_of_crow',
    'special perk: harbinger of crows',
    "Increase skills, but grant a curse every 13 weeks.",
    0,
    {
        combat: _harbinger_of_crow_skill_boost,
        brawn: _harbinger_of_crow_skill_boost,
        survival: _harbinger_of_crow_skill_boost,
        intrigue: _harbinger_of_crow_skill_boost,
        slaving: _harbinger_of_crow_skill_boost,
        social: _harbinger_of_crow_skill_boost,
        knowledge: _harbinger_of_crow_skill_boost,
        aid: _harbinger_of_crow_skill_boost,
        arcane: _harbinger_of_crow_skill_boost,
        sex: _harbinger_of_crow_skill_boost,
    },
    ['perk', 'perkspecial',],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % 13 == 0;
                }),
                setup.qc.DoAll([
                    setup.qc.Blessing('unit', 1, null, true),
                ]),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>


<<run new setup.Perk(
    'perk_unstable_bodyshifter',
    'special perk: unstable bodyshifter',
    "Automatically bodyshifts every " + setup.PERK_UNSTABLE_BODYSHIFTER_WEEKS + " weeks when at home.",
    0,
    {
    },
    ['perk', 'perkspecial',],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.And([
                    setup.qres.Function(() => {
                        return State.variables.calendar.getWeek() % setup.PERK_UNSTABLE_BODYSHIFTER_WEEKS == 0;
                    }),
                    setup.qres.Actor('unit', setup.qres.Home()),
                ]),
                setup.qc.DoAll([
                    setup.qc.Bodyshift('unit'),
                ]),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>


<<run new setup.Perk(
    'perk_chaotic_personality',
    'special perk: chaotic personality',
    "If unit is at home, reverses personality every " + setup.PERK_CHAOTIC_PERSONALITY_WEEKS + " weeks. Does not reverse lustful or chaste.",
    0,
    {
    },
    ['perk', 'perkspecial',],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % setup.PERK_CHAOTIC_PERSONALITY_WEEKS == 0;
                }),
                setup.qc.DoAll([
                    setup.qc.PerkChaoticPersonality(),
                ]),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

/* ####################### */
/* RANDOM PERKS */
/* ####################### */

<<run new setup.Perk(
    'perk_generalist',
    'perk: generalist',
    "Very slightly increase all skills",
    0,
    {
        combat: setup.PERK_GENERALIST_SKILL_GAIN,
        brawn: setup.PERK_GENERALIST_SKILL_GAIN,
        survival: setup.PERK_GENERALIST_SKILL_GAIN,
        intrigue: setup.PERK_GENERALIST_SKILL_GAIN,
        slaving: setup.PERK_GENERALIST_SKILL_GAIN,
        social: setup.PERK_GENERALIST_SKILL_GAIN,
        knowledge: setup.PERK_GENERALIST_SKILL_GAIN,
        aid: setup.PERK_GENERALIST_SKILL_GAIN,
        arcane: setup.PERK_GENERALIST_SKILL_GAIN,
        sex: setup.PERK_GENERALIST_SKILL_GAIN,
    },
    ['perk', 'perkstandard', ],
    { /* icon settings */
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>


<<run new setup.Perk(
    'perk_uncursed',
    'perk: uncursed',
    "Unit cannot get cursed. Whenever unit is cursed, it gets traumatized for " + setup.PERK_UNCURSED_TRAUMA_DURATION + " weeks instead.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>


<<run new setup.Perk(
    'perk_reduce_trauma',
    'perk: trauma-',
    "Reduces trauma skills penalties by " + parseInt(setup.PERK_TRAUMA_PENALTY_REDUCTION * 100) + '%',
    0,
    {},
    ['perk', 'perkstandard', ],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_increase_boon',
    'perk: boon+',
    "Increases skill bonus from boons by " + parseInt(setup.PERK_BOON_BONUS_INCREASE * 100) + '%',
    0,
    {},
    ['perk', 'perkstandard', ],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_reduce_corruption',
    'perk: corruption-',
    "Reduces corrupted body part skill penalties by " + parseInt(setup.PERK_CORRUPTION_PENALTY_REDUCTION * 100) + '%',
    0,
    {},
    ['perk', 'perkstandard', ],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [
            setup.qres.NoTrait(setup.trait.race_demon),
        ],
        perk_end_of_week_effect: [],
    },
)>>


<<run new setup.Perk(
    'perk_sluttiness',
    'perk: sluttiness+',
    "Increase sluttiness limit by " + setup.PERK_SLUTTINESS_LIMIT_INCREASE + ". Stacks with <<rep setup.trait.per_lustful>><<rep setup.trait.per_sexaddict>>.",
    0,
    {},
    ['perk', 'perkstandard', ],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [
            setup.qres.NoTrait(setup.trait.per_chaste),
        ],
        perk_end_of_week_effect: [],
    },
)>>


<<run new setup.Perk(
    'perk_duty',
    'perk: duty+',
    "Increase duty trigger chance by " + parseInt(setup.PERK_DUTY_BONUS * 100) + '%',
    0,
    {},
    ['perk', 'perkstandard', ],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_specialist',
    'perk: specialist',
    "Reduce duty specialist replacement weekly cost by " + parseInt(setup.PERK_SPECIALIST_REDUCTION * 100) + '%',
    0,
    {},
    ['perk', 'perkstandard', ],
    { /* icon settings */
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_blessing',
    'perk: blessing',
    "Grant a random blessing every " + setup.PERK_BLESSING_WEEKS + " weeks.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % setup.PERK_BLESSING_WEEKS == 0;
                }),
                setup.qc.Blessing('unit', 1),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_corruption',
    'perk: corruption',
    "Grant a random corruption every " + setup.PERK_CORRUPTION_WEEKS + " weeks.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [
            setup.qres.NoTrait(setup.trait.race_demon),
        ],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % setup.PERK_CORRUPTION_WEEKS == 0;
                }),
                setup.qc.Corrupt('unit'),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_purification',
    'perk: purification',
    "Grant a random purification every " + setup.PERK_PURIFICATION_WEEKS + " weeks.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [
            setup.qres.NoTrait(setup.trait.race_demon),
        ],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % setup.PERK_PURIFICATION_WEEKS == 0;
                }),
                setup.qc.Purify('unit'),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_switch',
    'perk: switch',
    "When at home, switches from dominant to submissive and vice-versa every " + setup.PERK_SWITCH_WEEKS + " weeks.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait([setup.trait.per_dominant, setup.trait.per_submissive], true),
        ],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.And([
                    setup.qres.Function(() => {
                        return State.variables.calendar.getWeek() % setup.PERK_SWITCH_WEEKS == 0;
                    }),
                    setup.qres.Actor('unit', setup.qres.Home()),
                ]),
                setup.qc.IfThenElse(
                    setup.qres.Actor('unit', setup.qres.Trait(setup.trait.per_dominant)),
                    setup.qc.TraitReplace('unit', setup.trait.per_submissive),
                    setup.qc.IfThenElse(
                        setup.qres.Actor('unit', setup.qres.Trait(setup.trait.per_submissive)),
                        setup.qc.TraitReplace('unit', setup.trait.per_dominant),
                        setup.qc.DoAll([]),
                    ),
                ),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_boon',
    'perk: boon',
    "Grant 5 weeks of a random boon every 10 weeks.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % 10 == 0;
                }),
                setup.qc.BoonizeRandom('unit', 5),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_tail',
    'perk: tail',
    "Grow a random tail every 23 weeks.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [
            setup.qres.NoTraits(
                setup.TraitHelper.getAllTraitsOfTags(['tail']),
            ),
        ],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Function(() => {
                    return State.variables.calendar.getWeek() % 23 == 0;
                }),
                setup.qc.AddTraitsRandom(
                    'unit',
                    setup.TraitHelper.getAllTraitsOfTags(['tail']),
                    1,
                    true,
                    false),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_sidejob',
    'perk: sidejob',
    "Grant " + setup.PERK_SIDEJOB_GOLD_PER_WEEK + "g per week whenever the unit is available at your fort.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait([
                'bg_scholar', 'bg_engineer', 'bg_boss', 'bg_mythical', 'bg_royal', 'bg_noble', 'bg_metalworker', 'bg_informer', 'bg_artist', 'bg_laborer', 'bg_clerk', 'bg_merchant', 'bg_foodworker', 'bg_entertainer', 'per_frugal', 'skill_alchemy', 'skill_entertain',
            ], true)
        ],
        perk_end_of_week_effect: [
            setup.qc.IfThenElse(
                setup.qres.Actor('unit', setup.qres.Available()),
                setup.qc.Money(setup.PERK_SIDEJOB_GOLD_PER_WEEK),
                setup.qc.DoAll([]),
            ),
        ],
    },
)>>

<<run new setup.Perk(
    'perk_scavenger',
    'perk: scavenger',
    "Grant roughly " + setup.PERK_SCAVENGER_GOLD_PER_WEEK + "g per week of questing whenever the unit participates in a quest. The exact amount depends on the quest.",
    0,
    {},
    ['perk', 'perkstandard', ],
    {
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait([
                'bg_thief', 'bg_nomad', 'bg_raider', 'bg_wildman', 'bg_woodsman', 'bg_adventurer', 'bg_mercenary', 'bg_hunter', 'bg_soldier', 'bg_pirate', 'per_attentive', 'skill_animal',
            ], true)
        ],
        perk_end_of_week_effect: [],
    },
)>>

/* ####################### */
/* NULL PERKS */
/* ####################### */

<<run new setup.Perk(
    'perk_null_magic',
    'perk: null magic',
    "Prevents magic traits like <<rep setup.trait.magic_fire>> from counting as disaster traits in quests",
    0,
    {
        arcane: -setup.PERK_NULL_SKILL_NERF / 2,
        aid: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait(setup.TraitHelper.getAllTraitsOfTags(['magic'])),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['magic']),
    },
)>>

<<run new setup.Perk(
    'perk_null_skill',
    'perk: null skill',
    "Prevents non-magic skill traits like <<rep setup.trait.skill_ambidextrous>> from counting as disaster traits in quests",
    0,
    {
        combat: -setup.PERK_NULL_SKILL_NERF / 2,
        survival: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait(setup.TraitHelper.getAllTraitsOfTags(['nonmagic'])),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['nonmagic']),
    },
)>>

<<run new setup.Perk(
    'perk_null_genital',
    'perk: null genital',
    "Prevents dick, balls, breasts, vagina, and anus traits from counting as disaster traits in quests",
    0,
    {
        social: -setup.PERK_NULL_SKILL_NERF / 2,
        sex: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait(setup.TraitHelper.getAllTraitsOfTags(['genital'])),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['genital']),
    },
)>>

<<run new setup.Perk(
    'perk_null_corrupted',
    'perk: null corrupted',
    "Prevents <<rep setup.trait.corrupted>><<rep setup.trait.corruptedfull>> from counting as disaster traits in quests",
    0,
    {
        slaving: -setup.PERK_NULL_SKILL_NERF / 2,
        intrigue: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.NoTrait(setup.trait.race_demon),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['corruptedcomputed']),
    },
)>>

<<run new setup.Perk(
    'perk_null_skin',
    'perk: null skin',
    "Prevents bodypart traits like <<rep setup.trait.ears_neko>> from counting as disaster traits in quests",
    0,
    {
        survival: -setup.PERK_NULL_SKILL_NERF / 2,
        social: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait(setup.TraitHelper.getAllTraitsOfTags(['skin'])),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['skin']),
    },
)>>


<<run new setup.Perk(
    'perk_null_bg',
    'perk: null background',
    "Prevents background traits like <<rep setup.trait.bg_slave>> from counting as disaster traits in quests",
    0,
    {
        knowledge: -setup.PERK_NULL_SKILL_NERF / 2,
        intrigue: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait(setup.TraitHelper.getAllTraitsOfTags(['bg'])),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['bg']),
    },
)>>


<<run new setup.Perk(
    'perk_null_physical',
    'perk: null physical',
    "Prevents physical traits like <<rep setup.trait.muscle_strong>> from counting as disaster traits in quests",
    0,
    {
        combat: -setup.PERK_NULL_SKILL_NERF / 2,
        brawn: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait(setup.TraitHelper.getAllTraitsOfTags(['nongenital'])),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: setup.TraitHelper.getAllTraitsOfTags(['nongenital']),
    },
)>>


<<run new setup.Perk(
    'perk_null_lunacy',
    'perk: null lunacy',
    "Prevents <<rep setup.trait.per_lunatic>><<rep setup.trait.per_masochistic>> from counting as disaster traits in quests",
    0,
    {
        arcane: -setup.PERK_NULL_SKILL_NERF / 2,
        brawn: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait([
                setup.trait.per_lunatic,
                setup.trait.per_masochistic
            ]),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: [
            setup.trait.per_lunatic,
            setup.trait.per_masochistic,
        ]
    },
)>>


<<run new setup.Perk(
    'perk_null_switch',
    'perk: null switch',
    "Prevents <<rep setup.trait.per_dominant>><<rep setup.trait.per_submissive>> from counting as disaster traits in quests",
    0,
    {
        slaving: -setup.PERK_NULL_SKILL_NERF / 2,
        knowledge: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait([
                setup.trait.per_dominant,
                setup.trait.per_submissive,
            ]),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: [
            setup.trait.per_dominant,
            setup.trait.per_submissive,
        ]
    },
)>>

<<run new setup.Perk(
    'perk_null_sex',
    'perk: null sex',
    "Prevents <<rep setup.trait.per_chaste>><<rep setup.trait.per_lustful>><<rep setup.trait.per_sexaddict>> from counting as disaster traits in quests",
    0,
    {
        sex: -setup.PERK_NULL_SKILL_NERF / 2,
        aid: -setup.PERK_NULL_SKILL_NERF / 2,
    },
    ['perk', 'perknull', 'perkstandard', ],
    { /* icon settings */
        cross: true,
    },
    {
        perk_choice_restrictions: [
            setup.qres.AnyTrait([
                setup.trait.per_chaste,
                setup.trait.per_lustful,
                setup.trait.per_sexaddict,
            ]),
        ],
        perk_end_of_week_effect: [],
        perk_null_traits: [
            setup.trait.per_chaste,
            setup.trait.per_lustful,
            setup.trait.per_sexaddict,
        ]
    },
)>>



/* ####################### */
/* BASIC PERKS  */
/* ####################### */

<<run new setup.Perk(
    'perk_combat',
    'perk: combat+',
    "Slightly increase <<rep setup.skill.combat>>",
    0,
    {combat: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {  /* icon settings */
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_brawn',
    'perk: brawn+',
    "Slightly increase <<rep setup.skill.brawn>>",
    0,
    {brawn: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    { /* icon settings */
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_survival',
    'perk: survival+',
    "Slightly increase <<rep setup.skill.survival>>",
    0,
    {survival: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_intrigue',
    'perk: intrigue+',
    "Slightly increase <<rep setup.skill.intrigue>>",
    0,
    {intrigue: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_slaving',
    'perk: slaving+',
    "Slightly increase <<rep setup.skill.slaving>>",
    0,
    {slaving: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_social',
    'perk: social+',
    "Slightly increase <<rep setup.skill.social>>",
    0,
    {social: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_knowledge',
    'perk: knowledge+',
    "Slightly increase <<rep setup.skill.knowledge>>",
    0,
    {knowledge: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_aid',
    'perk: aid+',
    "Slightly increase <<rep setup.skill.aid>>",
    0,
    {aid: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_arcane',
    'perk: arcane+',
    "Slightly increase <<rep setup.skill.arcane>>",
    0,
    {arcane: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>

<<run new setup.Perk(
    'perk_sex',
    'perk: sex+',
    "Slightly increase <<rep setup.skill.sex>>",
    0,
    {sex: setup.PERK_BASIC_SKILL_GAIN, },
    ['perk', 'perkbasic', 'perkstandard', ],
    {
        plus: true,
    },
    {
        perk_choice_restrictions: [],
        perk_end_of_week_effect: [],
    },
)>>



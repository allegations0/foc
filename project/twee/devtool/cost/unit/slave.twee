:: CostWasHelpText [nobr]
(The "a|was" syntax will automatically be converted in game to either was or were, depending
on the subject. E.g., "a|was here" becomes either "you were here" or "Bob was here".
A similar syntax exists for is/are: "a|is".)


:: CostSlave [nobr]

<p>
Gain slave: <<devactordefault>> with the following background.
The slave <<textbox '_background' 'a|was'>>.
For example, you can write "a|was a farmer".
<<include 'CostWasHelpText'>>

<br/>
The slave will be <<successtextlite 'free'>> to get.
</p>

<br/>
<<link 'Done' 'QGCostDone'>>
  <<set $qcost = setup.qc.Slave($qgDefaultActorName, _background, _needmoney)>>
<</link>>


:: CostSlaveMercenary [nobr]



<p>
Gain slave: <<devactordefault>> with the following background.
The slave <<textbox '_background' 'a|was'>>.
For example, you can write "a|was a farmer".
<<include 'CostWasHelpText'>>

<br/>
The slave will need to be <<dangertextlite 'bought'>> to get.
The price is multiplied by <<numberbox '_multi' 1>>.
</p>

<br/>
<<link 'Done' 'QGCostDone'>>
  <<set $qcost = setup.qc.Slave($qgDefaultActorName, _background, /* mercenary = */ true, _multi)>>
<</link>>


:: CostEscapedSlaveRandom [nobr]

<<set $qcost = setup.qc.EscapedSlaveRandom()>>
<<include QGCostDone>>


:: CostSlaveMarker [nobr]



<<devactordefault>> is marked as a slave, for gender preference.
<<message '(?)'>>
  You can use this to mark a certain actor to use slave's gender preferences.
  You don't have to use this when the unit is already a possible slave reward,
  but you can use this if the unit is just a slave participating in the story.
<</message>>

<br/>
<<link 'Done' 'QGCostDone'>>
  <<set $qcost = setup.qc.SlaveMarker($qgDefaultActorName)>>
<</link>>



:: DevGoToReturn [nobr]
<<run State.history.splice(State.activeIndex, 1)>>
<<devgotoreturn>>

:: DevToolFieldWidgets [nobr widget]

<<focwidget 'dtauthor'>>
  <p>
  <b>Author</b>:
  <<message '(?)'>>
    <div class='helpcard'>
      Enter your nickname.
      <br/>
      <br/>
      This will be displayed as author of this $devtooltype.
      You can leave this blank if you want to remain anonymous.
    </div>
  <</message>>
  <<set _fieldname = $args[0] + '.name'>>
  <<textbox _fieldname $args[1].name>>
  </p>

  <p>
  <b>Author / source URL</b>:
  <<message '(?)'>>
    <div class='helpcard'>
      OPTIONAL. Enter an URL you want the player to be redirected to when they click on the author's name.
      You can leave this empty -- it will then be filled to either the reddit post, the merge request,
      or the discord post.
      <br/>
      <br/>
      If you are supplying your own URL,
      please don't link to malicious URLs or URLs containing materials forbidden by the
      [[Content Guidelines|https://gitgud.io/darkofocdarko/fort-of-chains/-/blob/master/docs/contentguideline.md]] --
      these URLs will be removed.
    </div>
  <</message>>
  <<set _fieldname = $args[0] + '.url'>>
  <<textbox _fieldname $args[1].url>>
  </p>

<</focwidget>>

<<focwidget 'dtname'>>
  <p>
  <b>Name</b> of the $devtooltype:
  <<message '(?)'>>
    <div class='helpcard'>
      Enter the $devtooltype's name.
      <br/>
      <br/>
      Example: "Raiding the Farm: Corny Revenge"
    </div>
  <</message>>
  <<textbox $args[0] $args[1]>>
  </p>
<</focwidget>>

<<focwidget 'dtquestpool'>>
  <p>
  <b>Quest pool</b>:
  <<message '(?)'>>
    <div class='helpcard'>
      Where this quest can be scouted.
      <br/>
      <br/>
      This field is optional and can be left empty. If you do, the quest can never be
      scouted. This can be useful when the quest is generated by other means, for example,
      as part of a quest chain.
    </div>
  <</message>>
  <<if $args[1]>>
    <<= $args[1].rep()>>
    <<link '(remove)'>>
      <<set State.variables[$args[0].substr(1)] = null>>
      <<run setup.DevToolHelper.saveScrollPos()>>
      <<devgotoreturn>>
    <</link>>
  <<else>>
    <<dangertextlite 'No quest pool'>>
  <</if>>
  <<link '(Select quest pool)'>>
    <<run setup.DevToolHelper.saveScrollPos()>>
    <<goto $args[2]>>
  <</link>>
  </p>
<</focwidget>>

<<focwidget 'dtrarityhelp'>>
  <<message '(?)'>>
    <div class='helpcard'>
      <table class='table table-sm table-striped table-bordered'>
        <thead>
          <tr>
            <th>Rarity</th>
            <th>Effect</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Always</td>
            <td>Will always be scouted whenever possible. Use with care</td>
          </tr>
          <tr>
            <td>Common</td>
            <td>1 common quest every 2 quests</td>
          </tr>
          <tr>
            <td>Uncommon</td>
            <td>1 uncommon quest every 4 quests</td>
          </tr>
          <tr>
            <td>Rare</td>
            <td>1 rare quest every 8 quests</td>
          </tr>
          <tr>
            <td>Epic</td>
            <td>1 epic quest every 16 quests</td>
            <td></td>
          </tr>
          <tr>
            <td>Legendary</td>
            <td>1 legendary quest every 32 quests</td>
          </tr>
          <tr>
            <td>Never</td>
            <td>Will never get scouted</td>
          </tr>
        </tbody>
      </table>
    </div>
  <</message>>
<</focwidget>>

<<focwidget 'dtrarity'>>
  <p>
    <b>Rarity</b>:
    <<dtrarityhelp>>
    <<rep $args[1]>>
    <<link '(Select rarity)'>>
      <<run setup.DevToolHelper.saveScrollPos()>>
      <<goto $args[2]>>
    <</link>>
  </p>
<</focwidget>>

<<focwidget 'dtduration'>>
  <p>
    <b>Weeks to complete</b>:
    <<message '(?)'>>
      <div class='helpcard'>
        How many weeks to complete this $devtooltype?
        <br/>
        <br/>
        The guideline is as follows. You can deviate from it, but use your good judgment if you do.
        <br/>
        <table class='table table-sm table-striped table-bordered'>
          <thead>
            <tr>
              <th>Location</th>
              <th>Quest type</th>
              <th>Duration</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><<lore region_vale>></td>
              <td>Normal</td>
              <td>1 week</td>
            </tr>
            <tr>
              <td><<lore region_forest>></td>
              <td>Normal</td>
              <td>1 week</td>
            </tr>
            <tr>
              <td>City of Lucgate</td>
              <td>Normal</td>
              <td>1-2 week</td>
            </tr>
            <tr>
              <td><<Lore region_deep>></td>
              <td>Normal</td>
              <td>1-3 weeks</td>
            </tr>
            <tr>
              <td><<lore region_desert>></td>
              <td>Normal</td>
              <td>2-3 weeks</td>
            </tr>
            <tr>
              <td>All locations</td>
              <td>Veteran</td>
              <td>4-8 weeks</td>
            </tr>
          </tbody>
        </table>
        <br/>
        Note that all quests in the <<lore region_sea>> are Veteran quests.
      </div>
    <</message>>
    <<numberbox $args[0] $args[1]>> weeks
  </p>
<</focwidget>>


<<focwidget 'dtexpires'>>
  <b>Weeks before $devtooltype expires</b>:
  <<message '(?)'>>
    <div class='helpcard'>
      How many weeks before this quest expires on its own?
      <br/>
      <br/>
      <<if $devtooltype == 'quest'>>
        The standard value is <<successtext 6>> weeks.
      <<elseif $devtooltype == 'opportunity'>>
        The standard value is <<successtext 1>> week.
      <</if>>
      <br/>
      <br/>
      You can use less if you want to make the $devtooltype feels urgent,
      and use more if you want to allow players to have more time to prepare
      for the $devtooltype.
    </div>
  <</message>>
  <<numberbox $args[0] $args[1]>> weeks
<</focwidget>>

<<focwidget 'dtdifficultyrewardtable'>>
  <table class='table table-sm table-striped table-bordered'>
    <thead>
      <tr>
        <th>Modifier</th>
        <th>Risks</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>Easiest-Normal</td>
        <td>
          - Losing money
          <br/>
          - Gaining a little ire
          <br/>
          - Injury
          <br/>
          - Trauma
        </td>
      </tr>
      <tr>
        <td>Normal-Harder</td>
        <td>
          - All of the above
          <br/>
          - A slave escapes but immediately recapture-able
          <br/>
          - A slaver is captured but immediately rescue-able
          <br/>
          - Longer injuries
          <br/>
          - Longer trauma
          <br/>
          - Gaining more ire
          <br/>
          - Slavers gain a stack of curse (each curse is worth <<money -2500>>)
        </td>
      </tr>
      <tr>
        <td>Hardest+</td>
        <td>
          - All of the above
          <br/>
          - Very long trauma
          <br/>
          - Very long injury
          <br/>
          - Losing a slaver / slave that must be rescued using a Rescuer
          <br/>
          - Your slaver got corrupted
          <br/>
          - Gaining a lot of ire
          <br/>
          - Slavers gaining multiple stacks of curse
        </td>
      </tr>
    </tbody>
  </table>
<</focwidget>>

<<focwidget 'dtdifficultyhelp'>>
  <<message '(?)'>>
    <div class='helpcard'>
      Difficulty consists of two parts, a <<successtextlite 'level'>>
      and a <<dangertextlite 'modifier'>>.
      A Lv. X quest is meant to be tackled by a set of naked, unoptimized Lv. X slavers.
      The difficulty is further adjusted by the <<dangertextlite 'modifier'>>,
      such as <<successtextlite 'easy'>> or <<dangertextlite 'hard'>>.
      A Lv. 15 <<successtextlite 'easy'>> quest will be easier to do
      than a Lv. 15 <<dangertextlite 'hard'>> quest, for example.
      <br/>
      <br/>
      Note that at the late game, players are expected to have more optimized slavers,
      and hence higher level quests (e.g., Lv 60 quests) can be tackled by lv40 but optimized slavers.
      <br/>
      <br/>
      Quest level should be chosen in the following way:
      <br/>
      <table class='table table-sm table-striped table-bordered'>
        <thead>
          <tr>
            <th>Location</th>
            <th>Type</th>
            <th>Level</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><<lore region_vale>></td>
            <td>Normal Quests</td>
            <td>Lv. 1 - Lv. 20</td>
          </tr>
          <tr>
            <td><<lore region_forest>></td>
            <td>Normal Quests</td>
            <td>Lv. 15 - Lv. 30</td>
          </tr>
          <tr>
            <td>City of Lucgate</td>
            <td>Normal Quests</td>
            <td>Lv. 25 - Lv. 40</td>
          </tr>
          <tr>
            <td><<lore region_deep>></td>
            <td>Normal Quests</td>
            <td>Lv. 30 - Lv. 45</td>
          </tr>
          <tr>
            <td><<lore region_desert>></td>
            <td>Normal Quests</td>
            <td>Lv. 35 - Lv. 50</td>
          </tr>
          <tr>
            <td>All Locations</td>
            <td>Veteran Quests</td>
            <td>Lv. 45 - Lv. 100</td>
          </tr>
        </tbody>
      </table>
      <br/>
      Note that all quests in the <<lore region_sea>> are Veteran quests.
      <br/>
      <br/>
      Choosing modifier should be done according to their risks, i.e., what
      happens on failure. The following is a general guideline, but you are
      free to be creative with your quest failure outcomes.
      <br/>
      <<dtdifficultyrewardtable>>
    </div>
  <</message>>
<</focwidget>>

<<focwidget 'dtdifficulty'>>
  <p>
    <b>Difficulty</b>:
    <<dtdifficultyhelp>>
    <<if $args[0]['difficulty']>>
      <<rep $args[0]['difficulty']>>
    <</if>>
    <<link '(Choose difficulty)'>>
      <<run setup.DevToolHelper.saveScrollPos()>>
      <<goto $args[1]>>
    <</link>>
  </p>
<</focwidget>>

<<focwidget 'dttagsinternal'>>
  <<for _itag range setup.TagHelper.getAllTagsOfType('quest', $args[1])>>
    <<capture _itag>>
      <<set _tagtext = setup.TagHelper.tagRepLong('quest', _itag)>>
      <<if $args[0].tags.includes(_itag)>>
        (<<= _tagtext>>)
      <<else>>
        <<set _linkname = `(${_tagtext})`>>
        <<link _linkname>>
          <<run $args[0].tags.push(_itag)>>
          <<run setup.DevToolHelper.saveScrollPos()>>
          <<devgotoreturn>>
        <</link>>
      <</if>>
    <</capture>>
  <</for>>
<</focwidget>>

<<focwidget 'dttags'>>
  <div class='dutycard'>
    <div>
      <b>Tags</b>:
      <<message '(?)'>>
        <div class='helpcard'>
          Tags primary purpose is for filtering content, including filtering out banned content.
          Please see their corresponding help texts for more information.
        </div>
      <</message>>
      <<for _itag, _tag range $args[0].tags>>
        <<capture _tag>>
          <span class='tagcard'>
            <<= setup.TagHelper.tagRepLong('quest', _tag) >>
            <<link '<<icon cancel "Delete">>'>>
              <<set $args[0].tags = $args[0].tags.filter(item => item != _tag)>>
              <<run setup.DevToolHelper.saveScrollPos()>>
              <<devgotoreturn>>
            <</link>>
          </span>
        <</capture>>
      <</for>>
    </div>
    <div>
      New fetish tag:
      <<message '(?)'>>
        <div class='helpcard'>
          The fetishes associated with this $devtooltype.
          <br/>
          <br/>
          This is used to filter
          <<dangertext 'out'>> content based on player's preferences.
          You should only use these tags if it is highly relevant for your $devtooltype.
        </div>
      <</message>>
      <<dttagsinternal $args[0] 'fetish'>>
    </div>

    <<if $devtooltype != 'activity'>>
      <div>
        New region tag:
        <<message '(?)'>>
          <div class='helpcard'>
            The location where this $devtooltype is scouted or takes place.
            Usually only relevant for quests and opportunities.
          </div>
        <</message>>
        <<dttagsinternal $args[0] 'region'>>
      </div>

      <div>
        New type tag:
        <<message '(?)'>>
          <div class='helpcard'>
            Special properties of this $devtooltype, if any.
          </div>
        <</message>>
        <<dttagsinternal $args[0] 'type'>>
      </div>

      <div>
        New reward tag:
        <<message'(?)'>>
          <div class='helpcard'>
            The best guess on the rewards that this $devtooltype gives solely by reading the description.
            <br/>
            <br/>
            This is often not actually the real reward!
            There has been quests whose description is intentionally misleading, and the
            tags should reflect that.
          </div>
        <</message>>
        <<dttagsinternal $args[0] 'reward'>>
      </div>
    <</if>>
  </div>
<</focwidget>>

<<focwidget 'devroleaddcriteria'>>
  <<if !$args[0] || !$args[0].match('^[a-z0-9]+$') >>
    <<warning 'Role name cannot be empty and must consist of lowercase letters and numbers only'>>
  <<else>>
    <<if $dtquest.getAllActorNames().includes($args[0])>>
      <<warning 'Duplicate rolename'>>
    <<else>>
      <<if $devtooltype == 'quest'>>
        <<run $dtquest.unit_criteria_map[$args[0]] = {
          criteria: $args[1],
          offsetmod: 1,
        }>>
        <<unset $compiledquest>>
        <<devgotoreturn>>
      <</if>>
    <</if>>
  <</if>>
<</focwidget>>

<<focwidget 'dtactor'>>
  <div class='opportunitycard'>
    <div>
      <b>Actors</b>:
      <<message '(?)'>>
        <div class='helpcard'>
          List of units that are involved in this $devtooltype.
          <br/>
          <br/>
          You can use this to add NPCs to participate in your $devtooltype.
          For example, if you are raiding a farm, the NPC could be the farmer
          that you are raiding and potentially enslave.
          <br/>
          <br/>
          You can also use this to add units from your company to participate
          in the $devtooltype.
          These actors will be chosen randomly, among the eligible units in your
          company.
          For example, this could be used for making a quest where a slave tries to
          escape from your company.
          Note that the unit will be considered busy for the entirety of the
          $devtooltype, so this should only be used sparingly.
          If you just want a slaver to add flavor to the quest description,
          consider using
          <code>
            """<<set _u = setup.getAnySlaver()>>"""
          </code>
          instead.
        </div>
      <</message>>
      <<link '(Add new NPC)'>>
        <<run setup.DevToolHelper.saveScrollPos()>>
        <<goto 'QGAddActor'>>
      <</link>>

      <<message '(Add an actor from your company)'>>
        <div class='card lorecard'>
          <div><b>Actor name</b>: <<textbox '_newactorname' ''>></div>
          <<link '(Add actor)'>>
            <<if !_newactorname || $dtquest.getAllActorNames().includes(_newactorname)>>
              <<warning 'Duplicate actor name or missing actor name'>>
            <<else>>
              <<if !_newactorname.match('^[a-z0-9]+$') >>
                <<warning 'Actor name cannot be empty and must consist of lowercase letters and numbers only'>>
              <<else>>
                <<if ['event', 'quest', 'opportunity', 'activity',].includes($devtooltype)>>
                  <<set $dtquest.actor_unitgroup_key_map[_newactorname] = {
                    type: 'companyunit',
                    val: [],
                  }>>
                <</if>>
                <<unset $compiledquest>>
                <<run setup.DevToolHelper.saveScrollPos()>>
                <<devgotoreturn>>
              <</if>>
            <</if>>
          <</link>>
        </div>
      <</message>>
    </div>

    <<if ['event', 'quest', 'opportunity', 'activity',].includes($devtooltype)>>
      <<set _actor_unitgroup_key_map = $dtquest.actor_unitgroup_key_map>>
      <<set _listpathbase = "$dtquest.actor_unitgroup_key_map">>
    <</if>>
    <<for _iactor, _actor range _actor_unitgroup_key_map>>
      <div>
        <<if _actor>>
          <<if _actor.type == 'companyunit'>>
            <div class='marketobjectcard'>
              <<= _iactor>>
              <<message '(?)'>>
                A random unit from YOUR COMPANY that satisfies these requirements will be assigned to this actor.
              <</message>>:
              <<set _listpath = _listpathbase + "[" + _iactor + "].val">>
              <<devlist _listpath '(Add new restriction)' 'QGAddRestrictionUnit' 'DevGoToReturn'>>
            </div>
          <<elseif _actor.type == 'contact'>>
            <<= _iactor>>: (Contact) <<rep setup.contacttemplate[_actor.key]>>
          <<elseif _actor.type == 'unitgroup'>>
            <<= _iactor>>: <<rep setup.unitgroup[_actor.key]>>
          <</if>>
        <<else>>
          <<= _iactor>>: None
        <</if>>
        <<if ($devtooltype != 'activity') || (_iactor != 'a')>>
          <<capture _iactor, _actor>>
            <<set _text = `(remove ${_iactor})`>>
            <<link _text>>
              <<run delete _actor_unitgroup_key_map[_iactor]>>
              <<run setup.DevToolHelper.saveScrollPos()>>
              <<devgotoreturn>>
            <</link>>
          <</capture>>
        <</if>>
      </div>
    <</for>>
  </div>
<</focwidget>>


<<focwidget 'devroleaddunitgroup'>>
  <<if !$args[0] || !$args[0].match('^[a-z0-9]+$') >>
    <<warning 'Actor name cannot be empty and must consist of lowercase letters and numbers only'>>
  <<else>>
    <<if $dtquest.getAllActorNames().includes($args[0])>>
      <<warning 'Duplicate actor name'>>
    <<else>>
      <<if ['event', 'quest', 'opportunity', 'activity', ].includes($devtooltype)>>
        <<if $args[1] instanceof setup.ContactTemplate>>
          <<run $dtquest.actor_unitgroup_key_map[$args[0]] = {
            type: 'contact',
            key: $args[1].key
          }>>
        <<else>>
          <<run $dtquest.actor_unitgroup_key_map[$args[0]] = {
            type: 'unitgroup',
            key: $args[1].key
          }>>
        <</if>>
        <<unset $compiledquest>>
        <<devgotoreturn>>
      <</if>>
    <</if>>
  <</if>>
<</focwidget>>


<<focwidget 'dtcost'>>
  <div class='equipmentsetcard card'>
    <b>Costs</b>:
    <<message '(?)'>>
      <div class='helpcard'>
        Upfront cost of doing this $devtooltype.
        <br/>
        <br/>
        Most $devtooltype have no cost, and should leave this part empty.
        <<if $devtooltype == 'quest'>>
          If your quest have a cost, remember to
          take it into account when calculating the rewards.
        <</if>>
      </div>
    <</message>>
    <<devlist $args[0] '(Add new cost)' 'QGAddActualCost' 'DevGoToReturn'>>
  </div>
<</focwidget>>


<<focwidget 'dtrestriction'>>
  <div class='equipmentcard'>
    <b>Restrictions</b>:
    <<message '(?)'>>
      <div class='helpcard'>
        Restrictions on when the $devtooltype can
        <<if ['quest', 'opportunity'].includes($devtooltype)>>
          be scouted.
        <<elseif $devtooltype == 'event'>>
          appear.
        <<elseif $devtooltype == 'interaction'>>
          be performed.
        <<elseif $devtooltype == 'activity'>>
          be used
        <</if>>
        <br/>
        <br/>
        For example, you can restrict this only after you have build the
        <<rep setup.buildingtemplate.veteranhall>>.
      </div>
    <</message>>
    <<devlist $args[0] '(Add new restriction)' 'QGAddRestriction' 'DevGoToReturn'>>
  </div>
<</focwidget>>


<<focwidget 'dtvisrestriction'>>
  <div class='equipmentcard'>
    <b>Visibility Restrictions</b>:
    <<message '(?)'>>
      <div class='helpcard'>
        Restrictions on when this option can be seen by players.
        <br/>
        <br/>
        For example, you can restrict that this option is only visible once you complete another quest.
        Use sparingly.
      </div>
    <</message>>
    <<devlist $args[0] '(Add new restriction)' 'QGAddRestriction' 'DevGoToReturn'>>
  </div>
<</focwidget>>


<<focwidget 'dtexpireoutcome'>>
  <div class='eventcard'>
    Expiration outcome:
    <<message '(?)'>>
      <div class='helpcard'>
        What happens if you let this $devtooltype expire without being done.
        <br/>
        <br/>
        Usually, this list is empty.
        But this can be useful,
        for example in the following quest:
        A quest that recaptures a runaway slave, which will make the slave gone forever if
        the quest expires without being done.
      </div>
    <</message>>
    <<devlist $args[0] '(Add new result)' 'QGAddCost' 'DevGoToReturn'>>
  </div>
<</focwidget>>


<<focwidget 'dtoutcome'>>
  <div class='equipmentcard'>
    <b>Outcomes</b>:
    <<message '(?)'>>
      <div class='helpcard'>
        <<if $devtooltype == 'opportunity'>>
          What happens if you select this option.
        <<else>>
          What happens afterwards, if any.
        <</if>>
        <br/>
        <br/>
        For example, it could grant you a new quest, or it could give you money.
      </div>
    <</message>>
    <<devlist $args[0] '(Add new outcome)' 'QGAddCost' 'DevGoToReturn'>>
  </div>
<</focwidget>>


<<focwidget 'dtrewardhelp'>>
  <div class='helpcard'>
    This is the recommended total reward that your $devtooltype should give.
    The EXP reward is given automatically.
    <br/>
    <br/>
    The total recommended reward is computed based on the number of units,
    the difficulty, whether it's a critical result, and so on.
    To get this amount of reward, you can combine multiple rewards.
    Their monetary values are the following:
    <br/>
    <table class='table table-sm table-striped table-bordered'>
      <thead>
        <tr>
          <th>Type</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Money</td>
          <td>Their value</td>
        </tr>
        <tr>
          <td>Favor</td>
          <td>1.0 favor = <<money 200>></td>
        </tr>
        <tr>
          <td>Items</td>
          <td>Equal to their value</td>
        </tr>
        <tr>
          <td>Equipment / Furniture</td>
          <td>Equal to their value. Usually common is
            <<money setup.EQUIPMENT_PRICE_NORMAL>>,
            rare is <<money setup.EQUIPMENT_PRICE_GOOD>>,
            and master is <<money setup.EQUIPMENT_PRICE_MASTER>>.
          </td>
        </tr>
        <tr>
          <td>Boon</td>
          <td><<money 100>> per week per unit. For example, 15 weeks of boon to two units is worth <<money 3000>></td>
        </tr>
        <tr>
          <td>Healing</td>
          <td><<money 500>> per weeks healed</td>
        </tr>
        <tr>
          <td>Free slave / slaver</td>
          <td>Equal to their <b>unit value</b>. See table below</td>
        </tr>
        <tr>
          <td>Paid slave / slaver<<message '(?)'>>These are recruits / slaves that you have to buy in order to hire / enslave<</message>></td>
          <td><<money 500>> per unit</td>
        </tr>
        <tr>
          <td>Quests</td>
          <td>
            - Vale: <<money 250>>
            <br/>
            - Forest: <<money 250>>
            <br/>
            - City: <<money 300>>
            <br/>
            - Deep : <<money 400>>
            <br/>
            - Desert: <<money 500>>
            <br/>
            - Sea: <<money 750>>
          </td>
        </tr>
        <tr>
          <td>Trait</td>
          <td>Depends on the trait, but must be VERY expensive. At least <<money 10000>> for
          normal traits. <<money 80000>> or more for skill / magic traits (can be achieved via quest chains).</td>
        </tr>
        <tr>
          <td>Slave order</td>
          <td><<money 500>> plus any extra modifiers (see below)</td>
        </tr>
        <tr>
          <td>Title</td>
          <td>Variable. But titles that increase slave value should be worth at least that much</td>
        </tr>
        <tr>
          <td>Blessing</td>
          <td><<money 2500>> per stack</td>
        </tr>
        <tr>
          <td>Permanent skill boost</td>
          <td><<money 15000>> per boost</td>
        </tr>
      </tbody>
    </table>
    <br/>
    For example, to get a total reward of <<money 2000>>, you can give 2 quests in the Vale plus
    <<money 1500>>.
    <br/>
    <br/>
    Remember that <b>there is no need to be too creative with rewards</b>. If you are
    unsure what reward to give, monetary reward is always helpful to the players.
    <br/>
    <br/>
    <b>Calculating unit's value:</b> To calculate a unit's value,
    sum up their race value, the titles you give them (if any), as well as the value of
    any other traits modifiers you give them such as when they come pre-trained
    or with magical ability. The following is the base unit value based on their race.
    <table class='table table-sm table-striped table-bordered'>
      <thead>
        <tr>
          <th>Race</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><<rep setup.trait.subrace_humanvale>></td>
          <td>
            <<money 1500>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_humankingdom>></td>
          <td>
            <<money 1500>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_humandesert>></td>
          <td>
            <<money 2000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_humansea>></td>
          <td>
            <<money 5000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_angel>></td>
          <td>
            <<money 50000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_werewolf>></td>
          <td>
            <<money 5000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_elf>></td>
          <td>
            <<money 2500>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_drow>></td>
          <td>
            <<money 6000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_fairy>></td>
          <td>
            <<money 25000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_neko>></td>
          <td>
            <<money 2000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_tigerkin>></td>
          <td>
            <<money 30000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_orc>></td>
          <td>
            <<money 3000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_kobold>></td>
          <td>
            <<money 2000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_lizardkin>></td>
          <td>
            <<money 7500>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_dragonkin>></td>
          <td>
            <<money 30000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_demonkin>></td>
          <td>
            <<money 12000>>
          </td>
        </tr>
        <tr>
          <td><<rep setup.trait.subrace_demon>></td>
          <td>
            <<money 30000>>
          </td>
        </tr>
      </tbody>
    </table>
    <br/>
    <br/>
    <b>Slave order value calculation.</b>
    **Slave order reward calculation**.
    Slave order has a base price of <<money 500>>.
    The overall price can increase / decrease based on the quality of the order.
    As a baseline, a slave order that rewards 1x the slave value does not increase
    or decrease its price.
    Hence, if you give extra money on top of it (e.g., <<money 1500>> bonus payment)
    for the slave order, then increase its value by that much.
    <br/>
    <br/>
    If your $devtooltype gives negative result as a reward, make sure to compensate
    for them properly.
    <<message '(?)'>>
      <<dtfailurehelp>>
    <</message>>
  </div>
<</focwidget>>

<<focwidget 'dtfailurehelp'>>
  <div class='helpcard'>
    Different than success, there are no strict guidelines on what happens during failure.
    The outcomes should be reflected in the $devtooltype difficulty:
    <br/>
    <<dtdifficultyrewardtable>>
    <br/>
    <br/>
    There are rough monetary value of failure outcomes as well:
    <table class='table table-sm table-striped table-bordered'>
      <thead>
        <tr>
          <th>Type</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Losing Money</td>
          <td>Their value</td>
        </tr>
        <tr>
          <td>Gain Ire</td>
          <td><<money 500>> per ire</td>
        </tr>
        <tr>
          <td>Injury</td>
          <td><<money 350>> per week</td>
        </tr>
        <tr>
          <td>Trauma</td>
          <td><<money 100>> per week per slaver</td>
        </tr>
        <tr>
          <td>Corruption</td>
          <td><<money 3000>> per corruption</td>
        </tr>
        <tr>
          <td>Curse</td>
          <td><<money 2500>> per stack</td>
        </tr>
        <tr>
          <td>Losing a slaver / slave, but immediately rescue-able</td>
          <td>
            Depends on the quest difficulty:
            <br/>
            - <<money 1500>> for easiest
            <br/>
            - <<money 3000>> for medium
            <br/>
            - <<money 7000>> for hardest
          </td>
        </tr>
        <tr>
          <td>Losing a slaver / slave, but can be later rescued by a rescuer</td>
          <td>
            <<money 3000>>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
<</focwidget>>

<<focwidget 'dtstoryhelp'>>
  <p>
    The following are all the stories accompanying this $devtooltype.
    For quest outcomes and opportunity outcomes, <<successtext 'past tense is recommended.'>>
    For all other, including quest descriptions, events, and opportunity descriptions, <<successtext 'present tense is recommended.'>>
    <<message '(Content Guidelines)'>>
      <div class='helpcard'>
        The game tries to be permissive with what kind of stories you can add,
        but due to various reasons, there are some
        [[Guidelines|https://gitgud.io/darkofocdarko/fort-of-chains/-/blob/master/docs/contentguideline.md]]
        on this.
      </div>
    <</message>>
    <<message '(First-person Gotchas)'>>
      <div class='helpcard'>
        If the player character can go on your quest, try to make sure
        the text would still read decently when they do.
        It does not have to be perfect, as this is a fairly rare occurrence.
        All you have to do is: (1) use past tense or use the a|kill syntax, (2) use actor|is or actor|was,
        and (3) use the subjects
        from the toolbar. Your texts will then be automatically converted to first person
        if the player go on the quest.
        <br/>
        <br/>
        For example, 
        "&lt;&lt;Rep $g.actor&gt;&gt; actor|was drinking"
        will be converted to either
        "You were drinking" or "Bob was drinking".
        Similarly,
        "&lt;&lt;They $g.actor&gt;&gt; actor|drink too much and actor|is now drunk"
        will become
        "You drink too much and are now drunk" or
        "He drinks too much and is now drunk".
      </div>
    <</message>>
    <<message '(Help)'>>
      <div class='helpcard'>
        The code editor is divided into two panes: the left-side pane
        is for you to write. You can preview what it looks like by clicking the
        "Refresh" link on the top right of the output preview.
        <br/>
        <br/>
        You can add unit-specific "macros" by using the toolbar that appears when
        you are inside the left-side pane. For example, you can use this to insert a
        gender specific pronoun, or refer to a unit's name.
        There are much more things you can do it with it, please feel free to try
        each of the items in the toolbar.
      </div>
    <</message>>
    [[(Content Creator Cheat Sheet)|https://gitgud.io/darkofocdarko/fort-of-chains/-/blob/master/docs/textcheatsheet.md]]
    [[(Extra Commands and Syntax)|https://gitgud.io/darkofocdarko/fort-of-chains/-/blob/master/docs/text.md]]
    <<message '(Suggestions)'>>
      <div class='helpcard'>
        To make the slavers feel more alive, consider personalizing the story based on the slaver.
        This can be done in several ways:
        <br/>
        <br/>
        First, you can create different sentences based on their **general personality**.
        Each unit has one of the five possibly general personality.
        To do this, in the editor you choose "If Actor" from the toolbar, and then
        "Has general personality"
        <br/>
        <br/>
        Second, you can use adverbs / adjectives that will be based on their personality.
        To do this, in the editor choose "Terms" from the toolbar, and then
        "Random adverb" or "Random adjective". Alternatively, you can use
        the "your evil slaver Bob" option from the 
        <br/>
        <br/>
        Third, you can also create variations based on whether or not the units
        have a specific traits. Check the "If actor" tab of the toolbar.
        <br/>
        <br/>
        There are many other ways you can do this, but the three above are the main ones.
      </div>
    <</message>>
  </p>
<</focwidget>>


<<focwidget 'dtquestpoolchoose'>>
  <<set _questpooldefault = [
    'vale', 'forest', 'city', 'deep', 'desert', 'sea',
  ]>>

  <<for _iquestpool, _questpool range setup.questpool>>
    <<if _questpooldefault.includes(_questpool.key)>>
      <div>
        <<rep _questpool>>
        <<capture _questpool>>
          <<link '(select this)'>>
            <<set _questpoolchosen = _questpool>>
            <<include $args[0]>>
          <</link>>
        <</capture>>
      </div>
    <</if>>
  <</for>>

  <<message '(Other...)'>>
    <<for _iquestpool, _questpool range setup.questpool>>
      <<if !_questpooldefault.includes(_questpool.key)>>
        <div>
          <<rep _questpool>>
          <<capture _questpool>>
            <<link '(select this)'>>
              <<set _questpoolchosen = _questpool>>
              <<include $args[0]>>
            <</link>>
          <</capture>>
        </div>
      <</if>>
    <</for>>
  <</message>>

<</focwidget>>


<<focwidget 'dtraritychoose'>>
  <div>
    Choose rarity: 
    <<dtrarityhelp>>
  </div>
  <<for _rarity range setup.rarity>>
    <div>
      <<rep _rarity>>
      <<capture _rarity>>
        <<link '(select this)'>>
          <<set _raritychosen = _rarity>>
          <<include $args[0]>>
        <</link>>
      <</capture>>
    </div>
  <</for>>
<</focwidget>>



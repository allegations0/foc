const fs = require('fs')
const path = require('path')
const glob = require('glob')
const MiniCssExtractPlugin = require('mini-css-extract-plugin')
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin')

const config = require('./src/config.json')
const dir = config.directories;

// [config] List of image filenames to be embedded
function getImagesToEmbed() {
  return glob.sync("./dist/img/!(unit|panorama|content|noembed)/**/*.+(png|svg)").filter(x => !x.includes("/big/"))
}

const entry = {}

const userfiles = [...glob.sync(dir["user-js"]), ...glob.sync(dir["user-css"])]
if (userfiles.length)
  entry.user = userfiles

const vendorfiles = [...glob.sync(dir["vendor-js"]), ...glob.sync(dir["vendor-css"])]
if (vendorfiles.length)
  entry.vendor = vendorfiles

// generate a .js file referencing all the images to be embedded and initializing window.IMAGES
function generateEmbeddedImageIndex(index_file_path) {
  const filenames = getImagesToEmbed().map(x => x.replace(/\\/, '/')) // change path separators to '/'

  let data = "// File automatically generated by webpack.config.js\n// Includes the images that will be embedded\n"
  for (let i = 0; i < filenames.length; ++i)
    data += `import img${i} from ".${filenames[i]}"\n`

  data += `window.IMAGES = {`
  for (let i = 0; i < filenames.length; ++i) {
    let relfilepath = filenames[i].replace(/^.*?(img)/, '$1')
    data += `"${relfilepath}":img${i},\n`
  }
  data += `}\n`
  fs.writeFileSync(index_file_path, data, "utf8")
  return index_file_path
}

module.exports = env => {
  env = env || {}
  const outdir_js = env.debug ? dir["out-js-debug"] : dir["out-js"]
  const outdir_css = env.debug ? dir["out-css-debug"] : dir["out-css"]

  if (env.itch) // generated image index filename
    entry.images = generateEmbeddedImageIndex("./generated/embedded-image-index.js")

  return {
    mode: env.development ? 'development' : undefined, //'production',
    devtool: env.development ? 'eval' : false,
    entry,
    output: {
      path: path.join(__dirname, outdir_js),
      filename: "[name].min.js"
    },
    module: {
      rules: [
        { // load .js files, and transpile with babel
          test: /\.m?js$/i,
          exclude: /(node_modules|bower_components)/,
          use: {
            loader: 'babel-loader',
            options: {
              presets: [
                ['@babel/preset-env', {
                  useBuiltIns: 'entry',
                  corejs: '3.8',
                }]
              ],
              plugins: [
                [ "@babel/plugin-proposal-class-properties", { "loose": true } ],
                [ "@babel/plugin-proposal-private-methods", { "loose": true } ],
              ]
            }
          }
        },
        { // load .css files
          test: /\.css$/i,
          use: [
            MiniCssExtractPlugin.loader,
            {
              loader: "css-loader",
              options: {
                url: false
              }
            }
          ],
        },
        { // load inline svgs (raw string)
          test: /\.svg$/i,
          include: [path.resolve(__dirname, "src/assets")],
          use: 'raw-loader',
        },
        { // load images to be embedded (as data URIs)
          test: /\.(png|jpg|gif|svg)$/i,
          exclude: [path.resolve(__dirname, "src/assets")],
          use: [
            {
              loader: 'url-loader',
              options: {
                //limit: 8192,
              },
            },
          ]
        },
      ]
    },
    plugins: [
      new MiniCssExtractPlugin({
        filename: path.join(path.relative(outdir_js, outdir_css), "[name].min.css")
      })
    ],
    optimization: {
      removeAvailableModules: false,
      removeEmptyChunks: false,
      minimize: config.minify,
      minimizer: [
        '...',
        new CssMinimizerPlugin(),
      ],
      splitChunks: {
        cacheGroups: {
          commons: {
            test: /[\\/]node_modules[\\/]/,
            name: 'vendor',
            chunks: 'all'
          }
        }
      }
    }
  }
}
